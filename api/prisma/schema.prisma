generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  userType  UserType
  verified  Boolean? @default(false)
}

enum UserType {
  trust
  security
  cyber
  legal
  am
  superAdmin
}

model TrustAcc {
  rowId                      String  @id @default(auto()) @map("_id") @db.ObjectId
  pspId                      String
  bankId                     String
  reportingDate              String
  bankAccNumber              String
  trustAccDrTypeCode         String
  orgReceivingDonation       String  @unique
  sectorCode                 String?
  trustAccIntUtilizedDetails String
  openingBal                 Float
  principalAmount            Float
  interestEarned             Float
  closingBal                 Float
  trustAccInterestUtilized   Float?  @default(0)
}

model TrustAccPlacement {
  rowId                    String @id @default(auto()) @map("_id") @db.ObjectId
  pspId                    String
  reportingDate            String
  trustFundPlacement       String
  trustFundInvMaturityDate String
  catTrustFundInvestedAmt  Float  @default(0)
  interestAmtPerCat        Float  @default(0)
}

model FraudIncident {
  rowId             String         @id @default(auto()) @map("_id") @db.ObjectId
  pspId             String
  reportingDate     String
  subCountyCode     String
  subFraudCode      String
  fraudCategoryFlag String
  victimCategory    String
  victimInfo        String
  dateOfOccurence   String
  numberOfIncidents Int
  amountInvolved    Float          @default(0)
  amountLost        Float          @default(0)
  amountRecovered   Float          @default(0)
  actionTaken       String
  recoveryDetails   RecoveryStatus
}

enum RecoveryStatus {
  Complete
  Incomplete
}

model CounterfeitCurrencyFraud {
  rowId              String @id @default(auto()) @map("_id") @db.ObjectId
  pspId              String
  reportingDate      String
  subCountyCode      String
  agentId            String
  denominationCode   String
  serialNumber       String
  depositorsName     String
  tellersName        String
  dateConfiscated    String
  dateSubmittedToCBK String
  remarks            String
  numberOfPieces     Int
}

model CybersecurityIncident {
  rowId                         String   @id @default(auto()) @map("_id") @db.ObjectId
  pspId                         String
  reportingDate                 String
  incidentNumber                String   @unique
  locationOfAttacker            String
  incidentMode                  String
  datetimeOfIncident            DateTime @default(now())
  lossType                      String
  detailsOfIncident             String
  actionTakenToManageIncident   String
  datetimeOfIncidentResolution  DateTime @default(now())
  actionTakenToMitigateIncident String
  amountInvolved                Float
  amountLost                    Float
}

model Director {
  rowId                  String       @id @default(auto()) @map("_id") @db.ObjectId
  pspId                  String
  reportingDate          String
  directorName           String
  directorGender         Gender
  directorType           DirectorType
  dateOfBirth            String
  nationalityOfDirector  String
  residenceOfDirector    String
  idNumber               String
  kraPin                 String
  contact                String
  academicQualifications String?      @default("")
  otherDirectorships     String?      @default("N/A")
  dateOfAppointment      String
  dateOfRetirement       String?      @default("")
  reasonForRetirement    String?      @default("")
  disclosureDetails      String?      @default("")
}

enum Gender {
  M
  F
}

enum DirectorType {
  EXECUTIVE
  NONEXECUTIVE
}

model Shareholder {
  rowId                    String            @id @default(auto()) @map("_id") @db.ObjectId
  pspId                    String
  reportingDate            String
  shareholderName          String
  shareholderGender        ShareholderGender
  shareholderType          ShareholderType
  dateOfBirth              String
  nationalityOfShareholder String
  residenceOfShareholder   String
  countryOfIncorporation   String
  idNumber                 String
  kraPin                   String
  contact                  String
  academicQualifications   String?           @default("")
  previousEmployment       String?           @default("")
  dateBecameShareholder    String
  numberOfShareHeld        Int
  shareValue               Float
  percentageOfShare        Float
}

enum ShareholderGender {
  C
  M
  F
}

enum ShareholderType {
  Corporate
  Individual
}

model Trustee {
  rowId                    String  @id @default(auto()) @map("_id") @db.ObjectId
  pspId                    String
  reportingDate            String
  trustCompanyName         String
  directorsOfTrustCo       String
  trusteeNames             String
  trustGender              Gender
  dateOfBirth              String
  nationalityOfTrustee     String
  residenceOfShareholder   String
  idNumber                 String
  kraPin                   String
  contact                  String
  academicQualifications   String
  otherTrusteeships        String? @default("")
  disclosureDetails        String? @default("")
  shareholderOfTrust       String
  percentageOfShareholding Float
}

model SeniorMgt {
  rowId                    String  @id @default(auto()) @map("_id") @db.ObjectId
  pspId                    String
  reportingDate            String
  officerName              String
  officerGender            Gender
  designation              String
  dateOfBirth              String
  nationalityOfOfficer     String
  idNumber                 String
  kraPin                   String
  academicQualifications   String? @default("")
  dateOfEmployment         String
  employmentType           String
  expectedDateOfRetirement String
  otherAffiliations        String? @default("N/A")
  disclosureDetails        String? @default("")
}

model ExchangeRatesInfo {
  rowId            String @id @default(auto()) @map("_id") @db.ObjectId
  institutionCode  String
  reportingDate    String
  currencyCode     String
  buyingRate       Float
  sellingRate      Float
  meanRate         Float
  closingBidRate   Float
  closingOfferRate Float
  usdCrossRate     Float
}

model ForeignExchangePosition {
  rowId                    String @id @default(auto()) @map("_id") @db.ObjectId
  institutionCode          String
  reportingDate            String
  currencyCode             String
  kesSpotRate              Float
  openingPositionAmount    Float
  totalInflowsAmount       Float
  otherTotalInflowsAmount  Float
  totalOutflowsAmount      Float
  otherTotalOutflowsAmount Float
}

model DirectorManagementInfo {
  academicQualification   String
  appointmentDate         String
  bankingExperience       Int
  boardChairCommittee     String?
  boardCommitteeName      String?
  cbkApprovalDate         String
  companyName             String?
  contactNumber           String?
  dob                     String
  email                   String?
  executiveCatType        String
  gender                  Gender
  identificationNumber    String
  institutionCode         String
  managementCommitteeName String?
  memberType              String?
  nameOfDirector          String
  nationality             String
  passportNumber          String?
  profession              String
  reportingDate           String
  residency               String
  roleInCompany           String?
  rowId                   String  @id @default(auto()) @map("_id") @db.ObjectId
  sequenceId              String
  shareholdingFlag        String?
  shareholdingInfo        String?
  staffId                 String?
}

model ShareholderInfo {
  rowId               String  @id @default(auto()) @map("_id") @db.ObjectId
  bankCode            String
  reportingDate       String
  shareholderSequence String
  name                String
  gender              Gender
  type                String
  registrationDate    String
  nationality         String
  residence           String
  idNumber            String
  address             String?
  phoneNumber         String?
  majorPromoter       String?
  subscribedShares    Float
  shareValue          Float
  shareholdingAmount  Float
  paidUpShares        Float
  percentageOfShare   Float
}

model FinancialPosition {
  rowId             String @id @default(auto()) @map("_id") @db.ObjectId
  fxbCode           String
  reportingDate     String
  mappingCode       String
  amount            Float
  numberOfEmployees Int
  numberOfOutlets   Int
}

model OutletInfo {
  rowId             String @id @default(auto()) @map("_id") @db.ObjectId
  bankId            String
  outletId          String
  reportingDate     String
  typeOfOutlet      String
  outletName        String
  town              String
  subCountyCode     String
  latitude          Float
  longitude         Float
  cbkApprovalDate   String
  outletStatus      String
  openingDate       String
  closureDate       String
  licenseFeePayable Float
}
